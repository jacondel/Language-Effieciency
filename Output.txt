Encodings.txt   en  characters:  3401  words:  519
Before the early 1960s, computers were mainly used for number-crunching rather than for text, and memory was extremely expensive. Computers often allocated only 6 bits for each character, permitting only 64 characters-assigning codes for A-Z, a-z, and 0-9 would leave only 2 codes: nowhere near enough. Most computers opted not to support lower-case letters. Thus, early text projects such as Roberto Busa's Index Thomisticus, the Brown Corpus, and others had to resort to conventions such as keying an asterisk preceding letters actually intended to be upper-case.Fred Brooks of IBM argued strongly for going to 8-bit bytes, because someday people might want to process text; and won. Although IBM used EBCDIC, most text from then on came to be encoded in ASCII, using values from 0 to 31 for (non-printing) control characters, and values from 32 to 127 for graphic characters such as letters, digits, and punctuation. Most machines stored characters in 8 bits rather than 7, ignoring the remaining bit or using it as a checksum.The near-ubiquity of ASCII was a great help, but failed to address international and linguistic concerns. The dollar-sign ("$") was not so useful in England, and the accented characters used in Spanish, French, German, and many other languages were entirely unavailable in ASCII (not to mention characters used in Greek, Russian, and most Eastern languages). Many individuals, companies, and countries defined extra characters as needed-often reassigning control characters, or using value in the range from 128 to 255. Using values above 128 conflicts with using the 8th bit as a checksum, but the checksum usage gradually died out.These additional characters were encoded differently in different countries, making texts impossible to decode without figuring out the originator's rules. For instance, a browser might display Â¬A rather than ` if it tried to interpret one character set as another. The International Organisation for Standardisation (ISO) eventually developed several code pages under ISO 8859, to accommodate various languages. The first of these (ISO 8859-1) is also known as "Latin-1", and covers the needs of most (not all) European languages that use Latin-based characters (there was not quite enough room to cover them all). ISO 2022 then provided conventions for "switching" between different character sets in mid-file. Many other organisations developed variations on these, and for many years Windows and Macintosh computers used incompatible variations.The text-encoding situation became more and more complex, leading to efforts by ISO and by the Unicode Consortium to develop a single, unified character encoding that could cover all known (or at least all currently known) languages. After some conflict,[citation needed] these efforts were unified. Unicode currently allows for 1,114,112 code values, and assigns codes covering nearly all modern text writing systems, as well as many historical ones and for many non-linguistic characters such as printer's dingbats, mathematical symbols, etc.Text is considered plain-text regardless of its encoding. To properly understand or process it the recipient must know (or be able to figure out) what encoding was used; however, they need not know anything about the computer architecture that was used, or about the binary structures defined by whatever program (if any) created the data. 
Encodings.txt   fr  characters:  4102  words:  633
Avant le début des années 1960, les ordinateurs ont été principalement utilisés pour le numéro-croquer plutôt que pour le texte, et de la mémoire était extrêmement cher. Ordinateurs souvent attribués seulement 6 bits pour chaque caractère, permettant seulement 64  characters- "attribuer des codes pour AZ, az, et 0-9 laisserait seulement deux codes: loin d'être suffisant. La plupart des ordinateurs ont choisi de ne pas soutenir des lettres minuscules. Ainsi, les projets de texte premières tels que l'indice Thomisticus, le Brown Corpus, et d'autres de Roberto Busa ont dû recourir à des conventions telles que la saisie d'un astérisque lettres effectivement destinés à être supérieur cas précédent.Fred Brooks d'IBM a plaidé avec force pour aller à octets de 8 bits, parce que les gens de someday pourraient vouloir traiter le texte; et a gagné. Bien que IBM EBCDIC utilisé, la plupart des textes à partir de là est venu à être codé en ASCII, en utilisant des valeurs de 0 à 31 pour les caractères (sans impression) contrôle, et des valeurs de 32 à 127 pour les caractères graphiques tels que des lettres, chiffres et signes de ponctuation. La plupart des machines stockées caractères sur 8 bits plutôt que sept, en ignorant le bit restant ou de l'utiliser comme une somme de contrôle.La quasi-omniprésence de ASCII était d'une grande aide, mais n'a pas réussi à répondre aux préoccupations internationales et linguistiques. Le signe dollar («$») ne était pas si utile en Angleterre, et les caractères accentués utilisés en espagnol, Français, allemand, et bien d'autres langues étaient entièrement disponible en ASCII (pour ne pas mentionner les caractères utilisés en grec, russe, et la plupart des langues de l'Est). Beaucoup de personnes, de sociétés, et les pays définis comme des caractères supplémentaires needed-  «souvent réaffectation des caractères de contrôle, ou en utilisant la valeur dans la gamme de 128 à 255. Utilisation des valeurs supérieures à 128 conflits avec l'aide de la 8ème bit comme une somme de contrôle, mais l'utilisation de la somme de contrôle progressivement disparu.Ces caractères supplémentaires ont été codés différemment en différents pays, ce qui rend les textes impossibles à décoder sans avoir les règles de l'initiateur. Par exemple, un navigateur peut afficher Â¬A plutôt que `si elle essayait d'interpréter un personnage défini comme une autre. L'Organisation internationale pour Normalisation (ISO) plusieurs pages de code par la suite développé selon la norme ISO 8859, pour accueillir différentes langues. Latines Le premier d'entre eux (ISO 8859-1) est également connu comme "Latin-1", et couvre les besoins de la plupart (pas tous) qui utilisent les langues européennes caractères (il n'y avait pas assez de place pour les couvrir tous). ISO 2022 alors fourni conventions pour "commutation" entre les différents jeux de caractères à la mi-fichier. Beaucoup d'autres organisations ont élaboré sur ces variations, et pour de nombreuses années Windows et Ordinateurs Macintosh utilisés variations incompatibles.La situation de codage de texte est devenu de plus en plus complexe, ce qui conduit aux efforts déployés par l'ISO et par le Consortium Unicode pour développer un seul, l'encodage unifié qui pourrait couvrir tous connus (ou au moins tous actuellement connu) langues. Après un conflit, [citation nécessaire] ces efforts ont été unifiés. Unicode permet actuellement 1.114.112 valeurs de code, et assigne des codes couvrant presque tous les systèmes d'écriture de texte modernes, ainsi que de nombreux sites historiques ceux et pour de nombreux personnages non-linguistiques tels que les Symboles de l'imprimante, les symboles mathématiques, etc.Le texte est considéré comme texte brut indépendamment de son encodage. Pour bien comprendre ou processus, il doit connaître le destinataire (ou être en mesure de comprendre) ce codage a été utilisé; Cependant, ils doivent savent rien de l'architecture de l'ordinateur qui a été utilisé, ou sur les structures binaires définis par ne importe quel programme (le cas échéant) ont créé les données. 
Encodings.txt   it  characters:  3816  words:  576
Prima degli anni 1960, i computer sono stati utilizzati principalmente per masticazione di numeri, piuttosto che per il testo, e la memoria era estremamente costoso. I computer spesso assegnate solo 6 bit per ogni carattere, consentendo solo 64 characters-  "assegnazione di codici per AZ, az, e 0-9 avrebbe lasciato solo 2 codici: tuttavia ancora lontani. La maggior parte dei computer hanno scelto di non sostenere lettere minuscole. Così, i progetti di testo i primi, come Roberto Busa Index Thomisticus, il Brown Corpus, e altri hanno dovuto ricorrere a convenzioni, come digitando un asterisco precedente lettere in realtà destinati ad essere maiuscole.Fred Brooks di IBM ha sostenuto con forza per andare a 8-bit byte, perché un giorno la gente potrebbe desiderare di elaborare il testo; e ha vinto. Sebbene IBM utilizzato EBCDIC, la maggior parte di testo da allora in poi è venuto a essere codificati in ASCII, con valori da 0 a 31 per i caratteri di controllo (non-stampa), e valori 32-127 per i caratteri grafici come lettere, cifre e segni di punteggiatura. La maggior parte delle macchine memorizzati caratteri 8 bit anziché 7, ignorando la bit rimanente o usarlo come un checksum.La quasi-ubiquità di ASCII è stato di grande aiuto, ma non è riuscito a rispondere alle preoccupazioni internazionali e linguistiche. Il dollaro-segno ("$"), non è stato così utile in Inghilterra, ei caratteri accentati usato in spagnolo, Francesi, tedeschi, e molte altre lingue erano del tutto non disponibili in ASCII (per non parlare di caratteri usati in greco, russo, e la maggior parte lingue orientali). Molti individui, aziende e paesi definiti caratteri extra come needed-  "spesso riassegnazione caratteri di controllo, o utilizzando il valore nella gamma da 128 a 255. Utilizzando valori superiori a 128 conflitti con utilizzando il bit 8 ° come checksum, ma l'utilizzo di checksum gradualmente estinti.Questi caratteri supplementari sono stati codificati in modo diverso in diversi paesi, rendendo i testi indecifrabili senza capire le regole del cedente. Ad esempio, un browser potrebbe visualizzare Â¬A piuttosto che `se ha cercato di interpretare un personaggio come un altro set. L'Organizzazione internazionale per la Standardizzazione (ISO) alla fine ha sviluppato diverse pagine di codici in ISO 8859, per ospitare varie lingue. Basano-Latin Il primo di questi (ISO 8859-1) è conosciuto anche come "Latin-1", e copre le esigenze della maggior parte (non tutti) lingue europee che utilizzano personaggi (non c'era abbastanza spazio per coprire tutti). ISO 2022 poi fornito le convenzioni per "switching" tra diversi set di caratteri a metà del file. Molte altre organizzazioni hanno sviluppato variazioni su questi, e per molti anni di Windows e Computer Macintosh utilizzato variazioni incompatibili.La situazione di codifica del testo è diventato sempre più complesso, portando a sforzi da ISO e dal consorzio Unicode per sviluppare un singolo, la codifica dei caratteri unificata che potrebbe coprire tutti noti (o almeno tutti attualmente conosciuto) lingue. Dopo qualche conflitto, [citazione necessaria] questi sforzi sono stati unificati. Unicode consente attualmente di 1.114.112 valori di codice, e assegna i codici che coprono quasi tutti i moderni sistemi di scrittura del testo, così come molti storici quelli che per molti personaggi non-linguistiche quali dingbats della stampante, simboli matematici, eccIl testo viene considerato testo normale, indipendentemente dalla sua codifica. Per comprendere correttamente o processo che il destinatario deve conoscere (o essere in grado di capire) cosa encoding è stato utilizzato; Tuttavia, non è necessario sapere nulla l'architettura computer utilizzato, o sulle strutture binarie definite da qualsiasi programma (se presente) creati i dati. 
Encodings.txt   ru  characters:  3795  words:  518
До начала 1960-х годов, компьютеры были в основном используется для перемалывания чисел, а не для текста, и память была очень дорогой. Компьютеры часто выделяется только 6 бит для каждого символа, что позволяет только 64 characters&#226; € "Назначение кодов для AZ, AZ, и 0-9 будет оставить только 2 коды: нигде около достаточно. Большинство компьютеров решили не поддерживать строчные буквы. Таким образом, ранние текстовые проекты, такие как Роберто буса Индекса Thomisticus, Браун корпус, и другие вынуждены были прибегнуть к конвенций, таких как манипуляция звездочку предыдущий письма на самом деле, предназначенные для верхнего регистра.Фред Брукс IBM решительно поддержали собирается 8-битных байт, так как когда-нибудь люди, возможно, захотите, чтобы обработать текст; и выиграл. Хотя IBM используется EBCDIC, любой текст с этого пришел к быть закодированы в ASCII, используя значения от 0 до 31 для (не печать) управляющих символов и значений от 32 до 127 для графических символов, таких как буквы, цифры и знаки препинания. Большинство машин хранятся символы в 8 битов, а не 7, не обращая внимания остальные немного или использовать его в качестве контрольной суммы.Почти повсеместное распространение ASCII была большая помощь, но не смогли обратиться к международным и лингвистические проблемы. Знак доллара ("$") не так полезно в Англии, и акцентированные символы, используемые на испанском языке, Французский, немецкий и многие другие языки были полностью недоступны в формате ASCII (не говоря уже о символы, используемые в греческом, русском и большинство восточных языков). Многие люди, компании и страны, определены дополнительные символы, как needed&#226; € ", часто переназначение управляющие символы, или с использованием значения в диапазоне от 128 до 255. Использование значений выше 128 конфликтов с помощью 8-ой бит как контрольная сумма, но использование контрольной суммы постепенно вымерли.Эти дополнительные символы были закодированы по-разному в разные страны, что делает тексты невозможные для декодирования без выяснения правил оригинатора. Например, браузер может отображать &#194;¬A, а не `если он пытался интерпретировать один набор символов другой. Международная организация по Стандартизация (ISO) в итоге был разработан несколько кодовых страниц в соответствии с ISO 8859, для размещения различных языков. Первый из них (ISO 8859-1) также известен как "Latin-1", и покрывает потребности большинства (не все) европейские языки, использующие латинский основе персонажи (не было достаточно места, чтобы охватить их все). ISO 2022, то при условии, конвенций для "переключения" между различными наборами символов в середине файла. Многие другие организации разработали вариации на них, и в течение многих лет окна и Компьютеры Macintosh используются несовместимые вариации.Ситуация текст кодирования становится все более и более сложными, что ведет к усилиям по ISO и консорциумом Unicode для разработки единой, унифицированной кодировку, которая может охватить все известные (или, по крайней крайней мере, все в настоящее время известны) языков. Через какое-то конфликта, [править] эти усилия были объединены. Unicode в настоящее время позволяет 1114112 кодовых значений, и назначает коды, охватывающих почти все современные системы Текст письма, как и многие исторические те, и для многих неязыковых символов, таких как графическими метками принтера, математических символов и т.д.Текст считается обычным текстом, независимо от его кодирования. Чтобы правильно понять или обработать его получатель должен знать (или иметь возможность выяснить), что кодирование используется; Однако, они должны что-нибудь о компьютерной архитектуры, который был использован не знаю, или о бинарных структур, определяемых любой программы (если таковые имеются), созданный данные. 

Process finished with exit code 0