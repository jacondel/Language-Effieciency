До начала 1960-х годов, компьютеры были в основном используется для перемалывания чисел, а не для текста, и память была очень дорогой. Компьютеры часто выделяется только 6 бит для каждого символа, что позволяет только 64 characters&#226; € "Назначение кодов для AZ, AZ, и 0-9 будет оставить только 2 коды: нигде около достаточно. Большинство компьютеров решили не поддерживать строчные буквы. Таким образом, ранние текстовые проекты, такие как Роберто буса Индекса Thomisticus, Браун корпус, и другие вынуждены были прибегнуть к конвенций, таких как манипуляция звездочку предыдущий письма на самом деле, предназначенные для верхнего регистра.Фред Брукс IBM решительно поддержали собирается 8-битных байт, так как когда-нибудь люди, возможно, захотите, чтобы обработать текст; и выиграл. Хотя IBM используется EBCDIC, любой текст с этого пришел к быть закодированы в ASCII, используя значения от 0 до 31 для (не печать) управляющих символов и значений от 32 до 127 для графических символов, таких как буквы, цифры и знаки препинания. Большинство машин хранятся символы в 8 битов, а не 7, не обращая внимания остальные немного или использовать его в качестве контрольной суммы.Почти повсеместное распространение ASCII была большая помощь, но не смогли обратиться к международным и лингвистические проблемы. Знак доллара ("$") не так полезно в Англии, и акцентированные символы, используемые на испанском языке, Французский, немецкий и многие другие языки были полностью недоступны в формате ASCII (не говоря уже о символы, используемые в греческом, русском и большинство восточных языков). Многие люди, компании и страны, определены дополнительные символы, как needed&#226; € ", часто переназначение управляющие символы, или с использованием значения в диапазоне от 128 до 255. Использование значений выше 128 конфликтов с помощью 8-ой бит как контрольная сумма, но использование контрольной суммы постепенно вымерли.Эти дополнительные символы были закодированы по-разному в разные страны, что делает тексты невозможные для декодирования без выяснения правил оригинатора. Например, браузер может отображать &#194;¬A, а не `если он пытался интерпретировать один набор символов другой. Международная организация по Стандартизация (ISO) в итоге был разработан несколько кодовых страниц в соответствии с ISO 8859, для размещения различных языков. Первый из них (ISO 8859-1) также известен как "Latin-1", и покрывает потребности большинства (не все) европейские языки, использующие латинский основе персонажи (не было достаточно места, чтобы охватить их все). ISO 2022, то при условии, конвенций для "переключения" между различными наборами символов в середине файла. Многие другие организации разработали вариации на них, и в течение многих лет окна и Компьютеры Macintosh используются несовместимые вариации.Ситуация текст кодирования становится все более и более сложными, что ведет к усилиям по ISO и консорциумом Unicode для разработки единой, унифицированной кодировку, которая может охватить все известные (или, по крайней крайней мере, все в настоящее время известны) языков. Через какое-то конфликта, [править] эти усилия были объединены. Unicode в настоящее время позволяет 1114112 кодовых значений, и назначает коды, охватывающих почти все современные системы Текст письма, как и многие исторические те, и для многих неязыковых символов, таких как графическими метками принтера, математических символов и т.д.Текст считается обычным текстом, независимо от его кодирования. Чтобы правильно понять или обработать его получатель должен знать (или иметь возможность выяснить), что кодирование используется; Однако, они должны что-нибудь о компьютерной архитектуры, который был использован не знаю, или о бинарных структур, определяемых любой программы (если таковые имеются), созданный данные. 